{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HPC - Numpy Utility Package","text":""},{"location":"#overview","title":"Overview","text":"<p>HPC is a numpy utility package focused on high-performance computing applications. It provides efficient functions for indexing and manipulating numpy arrays without using loops, resulting in faster execution times.</p>"},{"location":"#main-features","title":"Main Features","text":"<ul> <li>Fast indexing of numpy arrays without using loops</li> <li>Efficient pixel extraction from arrays with optional masking</li> <li>Location of values in grids with coordinate mapping</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import numpy as np\nimport hpc\n\n# Create a sample array\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Get indices of all non-zero values\ni, j = hpc.get_indices(arr, None)\nprint(f\"Row indices: {i}\")\nprint(f\"Column indices: {j}\")\n\n# Get indices of specific value\ni, j = hpc.get_indices(arr, 5)\nprint(f\"Row indices for value 5: {i}\")\nprint(f\"Column indices for value 5: {j}\")\n\n# Get pixels with masking\nmask = np.array([[0, 1, 0], [0, 0, 1], [1, 0, 0]])\npixels = hpc.get_pixels(arr, mask)\nprint(f\"Masked pixels: {pixels}\")\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>For installation instructions, see the Installation page.</p>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>For detailed API documentation, see the API Documentation section.</p> <p>Note</p> <p>This documentation was generated on 2025-07-24.</p>"},{"location":"change-log/","title":"Change Log","text":""},{"location":"change-log/#014-2025-07-24","title":"0.1.4 (2025-07-24)","text":""},{"location":"change-log/#added","title":"Added","text":"<ul> <li>Improved documentation with Google style docstrings</li> <li>Added more comprehensive examples to all functions</li> </ul>"},{"location":"change-log/#changed","title":"Changed","text":"<ul> <li>Updated mkdocs configuration to use Google style docstrings</li> <li>Improved formatting of examples in docstrings</li> </ul>"},{"location":"change-log/#013-2024-06-24","title":"0.1.3 (2024-06-24)","text":""},{"location":"change-log/#changed_1","title":"Changed","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"change-log/#013-2023-10-31","title":"0.1.3 (2023-10-31)","text":""},{"location":"change-log/#changed_2","title":"Changed","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"change-log/#012-2023-08-30","title":"0.1.2 (2023-08-30)","text":""},{"location":"change-log/#changed_3","title":"Changed","text":"<ul> <li>Update dependencies</li> </ul>"},{"location":"change-log/#011-2023-04-23","title":"0.1.1 (2023-04-23)","text":""},{"location":"change-log/#added_1","title":"Added","text":"<ul> <li>get_pixels works with 3d arrays</li> </ul>"},{"location":"change-log/#010-2023-03-30","title":"0.1.0 (2023-03-30)","text":""},{"location":"change-log/#added_2","title":"Added","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#dependencies","title":"Dependencies","text":""},{"location":"installation/#required-dependencies","title":"Required dependencies","text":"<ul> <li>Python (3.11 or later)</li> <li>numpy (2.0.0 or later)</li> </ul>"},{"location":"installation/#optional-dependencies","title":"Optional dependencies","text":""},{"location":"installation/#development-dependencies","title":"Development dependencies","text":"<ul> <li>nbval (0.11.0 or later)</li> <li>pre-commit (3.7.1 or later)</li> <li>pre-commit-hooks (4.6.0 or later)</li> <li>pytest (8.2.2 or later)</li> <li>pytest-cov (5.0.0 or later)</li> <li>coverage</li> </ul>"},{"location":"installation/#documentation-dependencies","title":"Documentation dependencies","text":"<ul> <li>mkdocs (1.5.3 or later)</li> <li>mkdocs-material (9.5.3 or later)</li> <li>mkdocstrings (0.24.0 or later)</li> <li>mkdocstrings-python (1.7.5 or later)</li> <li>mike (2.1.3 or later)</li> <li>mkdocs-jupyter (0.25.1 or later)</li> <li>mkdocs-autorefs (1.2 or later)</li> <li>mkdocs-macros-plugin (1.3.7 or later)</li> <li>mkdocs-table-reader-plugin (3.1.0 or later)</li> <li>mkdocs-mermaid2-plugin (1.2.1 or later)</li> <li>jupyter-contrib-nbextensions (0.7.0 or later)</li> <li>notebook (&lt; 7.0)</li> <li>jupyter</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":"<p>Please install <code>hpc</code> in a virtual environment so that its requirements don't tamper with your system's Python.</p>"},{"location":"installation/#using-pixi-recommended","title":"Using Pixi (Recommended)","text":"<p>Pixi is a package manager and environment manager developed by Prefix.dev. It's designed to create reproducible environments and is used in this project for dependency management.</p>"},{"location":"installation/#installing-pixi","title":"Installing Pixi","text":"<p>If you don't have Pixi installed, you can install it following the instructions on the Pixi installation page.</p> <p>For Windows: <pre><code># Using PowerShell\niwr -useb https://pixi.sh/install.ps1 | iex\n</code></pre></p> <p>For Linux/macOS: <pre><code># Using curl\ncurl -fsSL https://pixi.sh/install.sh | bash\n</code></pre></p>"},{"location":"installation/#setting-up-the-environment-with-pixi","title":"Setting up the environment with Pixi","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/Serapieum-of-alex/hpc.git\ncd hpc\n</code></pre></p> </li> <li> <p>Install dependencies using Pixi: <pre><code>pixi install\n</code></pre></p> </li> </ol> <p>This will create a reproducible environment with all the required dependencies based on the pixi.lock file.</p>"},{"location":"installation/#using-different-environments","title":"Using different environments","text":"<p>The project defines three environments in the pyproject.toml file:</p> <ol> <li> <p>default: Basic environment with minimal dependencies <pre><code># Activate the default environment\npixi shell\n</code></pre></p> </li> <li> <p>dev: Development environment with testing tools <pre><code># Run a command in the dev environment\npixi run --environment dev pytest\n</code></pre></p> </li> <li> <p>docs: Documentation environment with tools for building docs <pre><code># Run a command in the docs environment\npixi run --environment docs mkdocs build\n</code></pre></p> </li> </ol>"},{"location":"installation/#using-conda","title":"Using Conda","text":"<p>The easiest way to install <code>hpc</code> is using the <code>conda</code> package manager. <code>hpc</code> is available in the conda-forge channel. To install you can use the following command:</p> <pre><code>conda install -c conda-forge hpc\n</code></pre> <p>If this works it will install <code>hpc</code> with all dependencies including Python, and you can skip the rest of the installation instructions.</p>"},{"location":"installation/#using-pip-pypi","title":"Using Pip (PyPI)","text":"<p>To install the latest release of <code>hpc</code> from PyPI:</p> <pre><code>pip install hpc-utils\n</code></pre> <p>To install a specific version:</p> <pre><code>pip install hpc-utils==0.1.4\n</code></pre>"},{"location":"installation/#installing-python","title":"Installing Python","text":"<p>For Python, we recommend using the Anaconda Distribution for Python 3, which is available for download from https://www.anaconda.com/download/. The installer gives the option to add <code>python</code> to your <code>PATH</code> environment variable. We will assume in the instructions below that it is available in the path, such that <code>python</code>, <code>pip</code>, and <code>conda</code> are all available from the command line.</p> <p>Note that there is no hard requirement specifically for Anaconda's Python, but often it makes installation of required dependencies easier using the conda package manager.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for <code>hpc</code> can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/Serapieum-of-alex/hpc\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/Serapieum-of-alex/hpc/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>python -m pip install .\n</code></pre> <p>To install directly from GitHub (from the HEAD of the main branch):</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/hpc.git\n</code></pre> <p>or from Github from a specific release:</p> <pre><code>pip install git+https://github.com/Serapieum-of-alex/hpc.git@{release}\n</code></pre> <p>If you are planning to make changes and contribute to the development of <code>hpc</code>, it is best to make a git clone of the repository, and do an editable install in the location of your clone. This will not move a copy to your Python installation directory, but instead create a link in your Python installation pointing to the folder you installed it from, such that any changes you make there are directly reflected in your install.</p> <pre><code>git clone https://github.com/Serapieum-of-alex/hpc.git\ncd hpc\npip install -e .\n</code></pre>"},{"location":"installation/#check-if-the-installation-is-successful","title":"Check if the installation is successful","text":"<p>To check if the install is successful, try importing the package:</p> <pre><code>import hpc\nprint(hpc.__version__)\n</code></pre> <p>This should run without errors and display the version number.</p> <p>Note</p> <p>This documentation was generated on 2025-07-24</p> <p>Documentation for the development version: https://hpc.readthedocs.org/en/latest/</p> <p>Documentation for the stable version: https://hpc.readthedocs.org/en/stable/</p>"},{"location":"pre-commit/","title":"Pre-commit Hooks with Pixi","text":""},{"location":"pre-commit/#overview","title":"Overview","text":"<p>Pre-commit hooks are scripts that run automatically before each commit to identify and fix common issues early in the development process. This project uses pre-commit to manage these hooks, ensuring code quality and consistency.</p> <p>When integrated with Pixi, pre-commit hooks can be easily managed within your project's development environment.</p>"},{"location":"pre-commit/#benefits-of-pre-commit-hooks","title":"Benefits of Pre-commit Hooks","text":"<ul> <li>Catch issues early: Identify problems before they're committed</li> <li>Consistent code style: Automatically format code to project standards</li> <li>Prevent security issues: Detect secrets, vulnerabilities, and other security concerns</li> <li>Save time: Avoid failed CI/CD pipelines by catching issues locally</li> <li>Improve code quality: Run tests and linters automatically</li> </ul>"},{"location":"pre-commit/#setting-up-pre-commit-with-pixi","title":"Setting Up Pre-commit with Pixi","text":""},{"location":"pre-commit/#1-install-pixi","title":"1. Install Pixi","text":"<p>If you haven't installed Pixi yet, follow the instructions on the Pixi installation page:</p> <p>For Windows: <pre><code># Using PowerShell\niwr -useb https://pixi.sh/install.ps1 | iex\n</code></pre></p> <p>For Linux/macOS: <pre><code># Using curl\ncurl -fsSL https://pixi.sh/install.sh | bash\n</code></pre></p>"},{"location":"pre-commit/#2-clone-the-repository-and-install-dependencies","title":"2. Clone the Repository and Install Dependencies","text":"<pre><code>git clone https://github.com/Serapieum-of-alex/hpc.git\ncd hpc\npixi install\n</code></pre>"},{"location":"pre-commit/#3-install-pre-commit-in-the-pixi-environment","title":"3. Install Pre-commit in the Pixi Environment","text":"<p>The project already has pre-commit as a development dependency in the <code>pyproject.toml</code> file. When you run <code>pixi install</code>, pre-commit will be installed in the development environment.</p> <p>To verify that pre-commit is installed:</p> <pre><code>pixi run --environment dev pre-commit --version\n</code></pre>"},{"location":"pre-commit/#4-install-the-pre-commit-hooks","title":"4. Install the Pre-commit Hooks","text":"<p>To install the pre-commit hooks into your local git repository:</p> <pre><code>pixi run --environment dev pre-commit install\n</code></pre> <p>This will set up the git hooks script and also install the hook environments.</p> <p>To install the commit message hook:</p> <pre><code>pixi run --environment dev pre-commit install --hook-type commit-msg\n</code></pre>"},{"location":"pre-commit/#using-pre-commit-hooks","title":"Using Pre-commit Hooks","text":""},{"location":"pre-commit/#running-pre-commit-hooks-manually","title":"Running Pre-commit Hooks Manually","text":"<p>To run all pre-commit hooks manually on all files:</p> <pre><code>pixi run --environment dev pre-commit run --all-files\n</code></pre> <p>To run a specific hook:</p> <pre><code>pixi run --environment dev pre-commit run &lt;hook-id&gt; --all-files\n</code></pre> <p>For example, to run just the black formatter:</p> <pre><code>pixi run --environment dev pre-commit run black --all-files\n</code></pre>"},{"location":"pre-commit/#automatic-execution","title":"Automatic Execution","text":"<p>Once installed, pre-commit hooks will run automatically when you attempt to commit changes. If any hook fails, the commit will be aborted, allowing you to fix the issues before trying again.</p>"},{"location":"pre-commit/#skipping-hooks","title":"Skipping Hooks","text":"<p>In some cases, you might need to skip pre-commit hooks:</p> <pre><code>git commit -m \"Your message\" --no-verify\n</code></pre> <p>However, this should be used sparingly, as the hooks are designed to maintain code quality.</p>"},{"location":"pre-commit/#configured-hooks","title":"Configured Hooks","text":"<p>This project has the following pre-commit hooks configured:</p>"},{"location":"pre-commit/#code-formatting","title":"Code Formatting","text":"<ul> <li>black: Python code formatter</li> <li>isort: Sorts Python imports</li> <li>beautysh: Shell script formatter</li> </ul>"},{"location":"pre-commit/#code-quality","title":"Code Quality","text":"<ul> <li>flake8: Python linter</li> <li>bandit: Security linter for Python code</li> </ul>"},{"location":"pre-commit/#file-formatting","title":"File Formatting","text":"<ul> <li>trailing-whitespace: Removes trailing whitespace</li> <li>end-of-file-fixer: Ensures files end with a newline</li> <li>mixed-line-ending: Normalizes line endings</li> <li>pretty-format-json: Formats JSON files</li> </ul>"},{"location":"pre-commit/#security-checks","title":"Security Checks","text":"<ul> <li>gitleaks: Scans for secrets and credentials</li> <li>detect-secrets: Detects secrets in code</li> <li>checkov: Scans for security issues</li> <li>truffleHog: Finds credentials and secrets</li> </ul>"},{"location":"pre-commit/#testing","title":"Testing","text":"<ul> <li>pytest-check: Runs pytest with coverage</li> <li>notebook-check: Validates Jupyter notebooks</li> <li>doctest: Runs doctests in Python modules</li> </ul>"},{"location":"pre-commit/#customizing-pre-commit-configuration","title":"Customizing Pre-commit Configuration","text":"<p>The pre-commit configuration is stored in the <code>.pre-commit-config.yaml</code> file at the root of the repository. You can modify this file to add, remove, or configure hooks.</p> <p>After modifying the configuration, update the installed hooks:</p> <pre><code>pixi run --environment dev pre-commit install\n</code></pre>"},{"location":"pre-commit/#troubleshooting","title":"Troubleshooting","text":""},{"location":"pre-commit/#hook-installation-issues","title":"Hook Installation Issues","text":"<p>If you encounter issues installing hooks:</p> <pre><code>pixi run --environment dev pre-commit clean\npixi run --environment dev pre-commit install\n</code></pre>"},{"location":"pre-commit/#slow-hooks","title":"Slow Hooks","text":"<p>Some hooks, particularly those that run tests, can be slow. You can skip these during development:</p> <pre><code>SKIP=pytest-check,notebook-check git commit -m \"Your message\"\n</code></pre>"},{"location":"pre-commit/#updating-hooks","title":"Updating Hooks","text":"<p>To update all hooks to their latest versions:</p> <pre><code>pixi run --environment dev pre-commit autoupdate\n</code></pre>"},{"location":"pre-commit/#best-practices","title":"Best Practices","text":"<ol> <li>Run hooks before pushing: Ensure all hooks pass before pushing to remote</li> <li>Keep hooks updated: Regularly run <code>pre-commit autoupdate</code></li> <li>Add custom hooks: Create local hooks for project-specific checks</li> <li>Document hook behavior: Ensure team members understand what each hook does</li> <li>Use with CI/CD: Run the same checks in your CI/CD pipeline</li> </ol> <p>Note</p> <p>This documentation was generated on 2025-07-24.</p>"},{"location":"api/indexing/","title":"Indexing Module","text":"<p>The indexing module provides efficient functions for working with numpy arrays, particularly for indexing and extracting values based on various conditions.</p>"},{"location":"api/indexing/#functions","title":"Functions","text":""},{"location":"api/indexing/#hpc.indexing.get_indices","title":"<code>get_indices(arr, mask_val)</code>","text":"<p>Get the array indeces for the non-zero cells.</p>"},{"location":"api/indexing/#hpc.indexing.get_indices--parameters","title":"Parameters","text":"<p>arr: [np.ndarray]     2D array with values you need to get the indexes of the cells that are filled with these values mask_val: [int]     if you need to locate only a certain value, and not all values in the array</p>"},{"location":"api/indexing/#hpc.indexing.get_indices--returns","title":"Returns","text":"<p>Tuple[np.ndarray, np.ndarray]     - first array is the x index     - second row is the y index</p> Source code in <code>hpc\\indexing.py</code> <pre><code>def get_indices(\n    arr: np.ndarray, mask_val: Union[int, float]\n) -&gt; Tuple[np.ndarray, np.ndarray]:\n    \"\"\"Get the array indeces for the non-zero cells.\n\n    Parameters\n    ----------\n    arr: [np.ndarray]\n        2D array with values you need to get the indexes of the cells that are filled with these values\n    mask_val: [int]\n        if you need to locate only a certain value, and not all values in the array\n\n    Returns\n    -------\n    Tuple[np.ndarray, np.ndarray]\n        - first array is the x index\n        - second row is the y index\n    \"\"\"\n    # Use the arr to get the indices of the non-zero pixels.\n    if mask_val:\n        (i, j) = (arr == mask_val).nonzero()\n    else:\n        (i, j) = arr.nonzero()\n\n    return i, j\n</code></pre>"},{"location":"api/indexing/#hpc.indexing.get_indices2","title":"<code>get_indices2(arr, mask=None)</code>","text":"<p>Get Indeces</p> <pre><code>- get the indeces of array cells after filtering the values based on two mask values\n</code></pre>"},{"location":"api/indexing/#hpc.indexing.get_indices2--parameters","title":"Parameters","text":"<p>arr: [np.ndarray]     numpy array mask: [list]     currently the mask list should contain only two values.</p>"},{"location":"api/indexing/#hpc.indexing.get_indices2--returns","title":"Returns","text":"Source code in <code>hpc\\indexing.py</code> <pre><code>def get_indices2(arr: np.ndarray, mask: List = None) -&gt; List[Tuple[int, int]]:\n    \"\"\"Get Indeces\n\n        - get the indeces of array cells after filtering the values based on two mask values\n\n    Parameters\n    ----------\n    arr: [np.ndarray]\n        numpy array\n    mask: [list]\n        currently the mask list should contain only two values.\n\n    Returns\n    -------\n\n    \"\"\"\n    # get the position of cells that is not zeros\n    if mask is not None:\n        if len(mask) &gt; 1:\n            mask = np.logical_and(\n                ~np.isclose(arr, mask[0], rtol=0.001),\n                ~np.isclose(arr, mask[1], rtol=0.001),\n            )\n        else:\n            if np.isnan(mask[0]):\n                mask = ~np.isnan(arr)\n            else:\n                mask = ~np.isclose(arr, mask[0], rtol=0.001)\n\n        rows = np.where(mask)[0]\n        cols = np.where(mask)[1]\n\n        ind = list(zip(rows, cols))\n    else:\n        rows = arr.shape[0]\n        cols = arr.shape[1]\n        ind = [(i, j) for i in range(rows) for j in range(cols)]\n\n    return ind\n</code></pre>"},{"location":"api/indexing/#hpc.indexing.get_pixels","title":"<code>get_pixels(arr, mask, mask_val=None)</code>","text":"<p>Get pixels from a raster (with optional mask).</p>"},{"location":"api/indexing/#hpc.indexing.get_pixels--parameters","title":"Parameters","text":"<p>arr : [np.ndarray]     Array of raster data in the form [bands][y][x]. mask : [np.ndarray]     Array (2D) of zeroes to mask data.(from the rastarizing the vector) mask_val : int     Value of the data pixels in the mask. Default: non-zero.</p>"},{"location":"api/indexing/#hpc.indexing.get_pixels--returns","title":"Returns","text":"<p>np.ndarray     Array of non-masked data.</p> Source code in <code>hpc\\indexing.py</code> <pre><code>def get_pixels(arr, mask, mask_val=None):\n    \"\"\"Get pixels from a raster (with optional mask).\n\n    Parameters\n    ----------\n    arr : [np.ndarray]\n        Array of raster data in the form [bands][y][x].\n    mask : [np.ndarray]\n        Array (2D) of zeroes to mask data.(from the rastarizing the vector)\n    mask_val : int\n        Value of the data pixels in the mask. Default: non-zero.\n\n    Returns\n    -------\n    np.ndarray\n        Array of non-masked data.\n    \"\"\"\n    if mask is None:\n        return arr\n\n    i, j = get_indices(mask, mask_val)\n    # get the coresponding values to the indeces from the array\n    vals = arr[i, j] if arr.ndim == 2 else arr[:, i, j]\n    return vals\n</code></pre>"},{"location":"api/indexing/#hpc.indexing.get_pixels2","title":"<code>get_pixels2(arr, mask=None)</code>","text":"<p>Get pixels from a raster (with optional mask).</p>"},{"location":"api/indexing/#hpc.indexing.get_pixels2--parameters","title":"Parameters","text":"<p>arr : [np.ndarray]     Array of raster data in the form [y][x]. mask : [np.ndarray]     Array (2D) of zeroes to mask data.(from the rastarizing the vector)</p>"},{"location":"api/indexing/#hpc.indexing.get_pixels2--returns","title":"Returns","text":"<p>np.ndarray     Array of non-masked data.</p> Source code in <code>hpc\\indexing.py</code> <pre><code>def get_pixels2(arr: np.ndarray, mask: List = None) -&gt; np.ndarray:\n    \"\"\"Get pixels from a raster (with optional mask).\n\n    Parameters\n    ----------\n    arr : [np.ndarray]\n        Array of raster data in the form [y][x].\n    mask : [np.ndarray]\n        Array (2D) of zeroes to mask data.(from the rastarizing the vector)\n\n    Returns\n    -------\n    np.ndarray\n        Array of non-masked data.\n    \"\"\"\n    if arr.ndim == 2:\n        ind = get_indices2(arr, mask)\n        fn = lambda x: arr[x[0], x[1]]\n        values = np.fromiter(map(fn, ind), dtype=arr.dtype)\n    else:\n        ind = get_indices2(arr[0, :, :], mask)\n        fn = lambda x: arr[:, x[0], x[1]]\n        values = list(map(fn, ind))\n        values = np.array(values, dtype=arr.dtype)\n        values = values.transpose()\n\n    return values\n</code></pre>"},{"location":"api/indexing/#hpc.indexing.locate_values","title":"<code>locate_values(values, grid_x, grid_y)</code>","text":"<p>Locate values in an array</p> <pre><code>locate a value in array, each point has to values (resembling the x &amp; y coordinates), the values array\nis the grid that we are trying to locate our coordinates in, with the first column being the x\ncoordinate, and the second column being the y coordinates.\n</code></pre>"},{"location":"api/indexing/#hpc.indexing.locate_values--parameters","title":"Parameters","text":"<p>values: [array]     array with a dimension (any, 2), each row has two values x &amp; y coordinates.     array([[454795, 503143],            [443847, 481850],            [454044, 481189]]) grid_x: [array]     - The x coordinates starting from left to righ (west to east), so the first value is the mine first value is grid_y: [array]     - The y coordinates starting from top to bottom (north to south), so the first value is     the max     np.array([[434968, 518007],                [438968, 514007],                [442968, 510007],                [446968, 506007],                [450968, 502007],                [454968, 498007],                [458968, 494007],                [462968, 490007],                [466968, 486007],                [470968, 482007],                [474968, 478007],                [478968, 474007],                [482968, 470007],                [486968, 466007]])</p>"},{"location":"api/indexing/#hpc.indexing.locate_values--returns","title":"Returns","text":"<p>array:     array with a shape (any, 2), for the row, column indices in the array.     array([[ 5,  4],            [ 2,  9],            [ 5,  9]])</p> Source code in <code>hpc\\indexing.py</code> <pre><code>def locate_values(values: np.ndarray, grid_x: np.ndarray, grid_y: np.ndarray):\n    \"\"\"Locate values in an array\n\n        locate a value in array, each point has to values (resembling the x &amp; y coordinates), the values array\n        is the grid that we are trying to locate our coordinates in, with the first column being the x\n        coordinate, and the second column being the y coordinates.\n\n    Parameters\n    ----------\n    values: [array]\n        array with a dimension (any, 2), each row has two values x &amp; y coordinates.\n        array([[454795, 503143],\n               [443847, 481850],\n               [454044, 481189]])\n    grid_x: [array]\n        - The x coordinates starting from left to righ (west to east), so the first value is the mine first value is\n    grid_y: [array]\n        - The y coordinates starting from top to bottom (north to south), so the first value is\n        the max\n        np.array([[434968, 518007],\n                   [438968, 514007],\n                   [442968, 510007],\n                   [446968, 506007],\n                   [450968, 502007],\n                   [454968, 498007],\n                   [458968, 494007],\n                   [462968, 490007],\n                   [466968, 486007],\n                   [470968, 482007],\n                   [474968, 478007],\n                   [478968, 474007],\n                   [482968, 470007],\n                   [486968, 466007]])\n\n    Returns\n    -------\n    array:\n        array with a shape (any, 2), for the row, column indices in the array.\n        array([[ 5,  4],\n               [ 2,  9],\n               [ 5,  9]])\n    \"\"\"\n\n    def find(point_i):\n        x_ind = np.abs(point_i[0] - grid_x).argmin()\n        y_ind = np.abs(point_i[1] - grid_y).argmin()\n        return x_ind, y_ind\n\n    indices = np.array(list(map(find, values)))\n\n    return indices\n</code></pre>"}]}